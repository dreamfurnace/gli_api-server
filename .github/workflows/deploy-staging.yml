name: Deploy Django API to Staging

on:
  push:
    branches: [stg]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: gli-api-staging
  ECS_CLUSTER: staging-gli-cluster
  ECS_SERVICE: staging-django-api-service
  PYTHON_VERSION: '3.11'

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: AWS Secrets Manager에서 DB 정보 가져오기
      id: get-db-secret
      run: |
        SECRET_JSON=$(aws secretsmanager get-secret-value \
          --secret-id gli/db/staging \
          --query SecretString \
          --output text)

        echo "DB_HOST=$(echo $SECRET_JSON | jq -r .host)" >> $GITHUB_ENV
        echo "DB_NAME=$(echo $SECRET_JSON | jq -r .dbname)" >> $GITHUB_ENV
        echo "DB_USER=$(echo $SECRET_JSON | jq -r .username)" >> $GITHUB_ENV
        echo "DB_PASSWORD=$(echo $SECRET_JSON | jq -r .password)" >> $GITHUB_ENV
        echo "DB_PORT=$(echo $SECRET_JSON | jq -r .port)" >> $GITHUB_ENV

        echo "✅ DB 정보 가져오기 완료"

    - name: Generate .env.staging file
      run: |
        # 한국 시간 기준 BUILD_UID 생성 (MM.DD-HH:MM:SS)
        export TZ='Asia/Seoul'
        BUILD_UID=$(date '+%m.%d-%H:%M:%S')
        echo "BUILD_UID=$BUILD_UID" >> $GITHUB_ENV
        echo "🎯 Generated BUILD_UID: $BUILD_UID (KST)"

        # .env.staging 파일 생성
        touch .env.staging
        echo "# GLI Django API - Staging Environment" >> .env.staging
        echo "# Generated by GitHub Actions at $BUILD_UID" >> .env.staging
        echo "" >> .env.staging

        # 환경 설정
        echo "DJANGO_ENV=staging" >> .env.staging
        echo "BUILD_UID=$BUILD_UID" >> .env.staging
        echo "" >> .env.staging

        # 보안 키
        echo "DJANGO_SECRET_KEY=${{ secrets.SECRET_KEY_STAGING }}" >> .env.staging
        echo "" >> .env.staging

        # 데이터베이스 (Secrets Manager에서 가져온 정보)
        echo "DATABASE_NAME=${{ env.DB_NAME }}" >> .env.staging
        echo "DATABASE_USER=${{ env.DB_USER }}" >> .env.staging
        echo "DATABASE_PASSWORD=${{ env.DB_PASSWORD }}" >> .env.staging
        echo "DATABASE_HOST=${{ env.DB_HOST }}" >> .env.staging
        echo "DATABASE_PORT=${{ env.DB_PORT }}" >> .env.staging
        echo "" >> .env.staging

        # CORS 및 Allowed Hosts
        echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS_STAGING }}" >> .env.staging
        echo "FRONTEND_BASE_URL=${{ secrets.FRONTEND_BASE_URL_STAGING }}" >> .env.staging
        echo "DJANGO_ALLOWED_HOSTS=stg-api.glibiz.com,*.ap-northeast-2.elb.amazonaws.com,10.0.0.0/16" >> .env.staging
        echo "" >> .env.staging

        # AWS 설정
        echo "AWS_REGION=ap-northeast-2" >> .env.staging
        echo "AWS_DEFAULT_REGION=ap-northeast-2" >> .env.staging
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.staging
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.staging
        echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME_STAGING }}" >> .env.staging
        echo "AWS_S3_REGION=ap-northeast-2" >> .env.staging
        echo "" >> .env.staging

        # 기타 설정
        echo "TIME_ZONE=Asia/Seoul" >> .env.staging
        echo "USE_TZ=True" >> .env.staging
        echo "LANGUAGE_CODE=ko-kr" >> .env.staging
        echo "PYTHONUNBUFFERED=1" >> .env.staging

        echo "📝 .env.staging 파일 생성 완료 ($(wc -l < .env.staging)줄)"
        echo "🔑 설정된 환경변수 개수: $(grep -c '=' .env.staging)"

    - name: JWT 키 설정
      run: |
        mkdir -p keys
        echo "${{ secrets.JWT_PRIVATE_KEY_STAGING }}" > keys/jwt-private.pem &
        echo "${{ secrets.JWT_PUBLIC_KEY_STAGING }}" > keys/jwt-public.pem &
        wait
        echo "✅ JWT 키 설정 완료"

    - name: ECR 로그인
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker 이미지 빌드 및 푸시
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Docker 이미지 빌드 시작..."
        docker buildx create --use --name gli-builder || docker buildx use gli-builder
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --push \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest \
          .
        echo "✅ Docker 이미지 빌드 및 푸시 완료"

    - name: Task Definition 생성 및 등록
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "📝 Task Definition 생성 중..."

        # VPC 설정 조회
        VPC_ID=$(aws ec2 describe-vpcs \
          --filters "Name=is-default,Values=true" \
          --query 'Vpcs[0].VpcId' \
          --output text)

        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

        # Task Definition JSON 생성
        cat > task-definition.json <<EOF
        {
          "family": "staging-gli-django-api",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::917891822317:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::917891822317:role/ecsTaskExecutionRole",
          "containerDefinitions": [
            {
              "name": "django-api",
              "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "DJANGO_ENV",
                  "value": "staging"
                },
                {
                  "name": "BUILD_UID",
                  "value": "${{ env.BUILD_UID }}"
                },
                {
                  "name": "PYTHONUNBUFFERED",
                  "value": "1"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/staging-gli-django-api",
                  "awslogs-region": "ap-northeast-2",
                  "awslogs-stream-prefix": "django-api",
                  "awslogs-create-group": "true"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 60
              }
            }
          ]
        }
        EOF

        # Task Definition 등록
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
        echo "✅ Task Definition 등록 완료: $NEW_TASK_DEF_ARN"

    - name: Django 마이그레이션 실행
      run: |
        echo "🔄 Django 마이그레이션 시작..."

        # 네트워크 설정 조회
        SUBNETS=$(aws ec2 describe-subnets \
          --filters "Name=vpc-id,Values=${{ env.VPC_ID }}" "Name=availability-zone,Values=ap-northeast-2a,ap-northeast-2b" \
          --query 'Subnets[0:2].SubnetId' \
          --output text | tr '\t' ',')

        # Security Group 조회 또는 생성
        SG_ID=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=staging-ecs-sg" \
          --query 'SecurityGroups[0].GroupId' \
          --output text 2>/dev/null || echo "")

        if [ -z "$SG_ID" ] || [ "$SG_ID" = "None" ]; then
          echo "⚠️  Security Group이 없습니다. 생성이 필요합니다."
          echo "다음 명령으로 Security Group을 생성하세요:"
          echo "aws ec2 create-security-group --group-name staging-ecs-sg --description 'ECS Staging Security Group' --vpc-id ${{ env.VPC_ID }}"
          exit 1
        fi

        echo "네트워크 설정: Subnets=$SUBNETS, SecurityGroup=$SG_ID"

        # 마이그레이션 태스크 실행
        MIGRATION_TASK=$(aws ecs run-task \
          --cluster $ECS_CLUSTER \
          --task-definition ${{ env.TASK_DEF_ARN }} \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
          --overrides '{
            "containerOverrides": [{
              "name": "django-api",
              "command": ["sh", "-c", "uv run python manage.py migrate --verbosity=2 --noinput || (echo 'Migration failed, checking schema...' && uv run python manage.py showmigrations && exit 1)"],
              "environment": [
                {"name": "DJANGO_LOG_LEVEL", "value": "DEBUG"},
                {"name": "PYTHONUNBUFFERED", "value": "1"}
              ]
            }]
          }' \
          --query 'tasks[0].taskArn' \
          --output text)

        echo "마이그레이션 태스크 실행: $MIGRATION_TASK"

        # 마이그레이션 완료 대기 (타임아웃 8분)
        echo "⏳ 마이그레이션 완료 대기 중..."
        START_TIME=$(date +%s)
        TIMEOUT=480

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))

          if [ $ELAPSED -gt $TIMEOUT ]; then
            echo "❌ 마이그레이션 타임아웃 (8분 초과)"
            exit 1
          fi

          TASK_STATUS=$(aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $MIGRATION_TASK \
            --query 'tasks[0].lastStatus' \
            --output text)

          echo "📊 마이그레이션 상태: $TASK_STATUS (경과: ${ELAPSED}s)"

          if [ "$TASK_STATUS" = "STOPPED" ]; then
            echo "✅ 마이그레이션 태스크 완료"
            break
          fi

          sleep 20
        done

        # 마이그레이션 결과 확인
        MIGRATION_EXIT_CODE=$(aws ecs describe-tasks \
          --cluster $ECS_CLUSTER \
          --tasks $MIGRATION_TASK \
          --query 'tasks[0].containers[0].exitCode' \
          --output text)

        if [ "$MIGRATION_EXIT_CODE" != "0" ]; then
          echo "❌ 마이그레이션 실패 (종료 코드: $MIGRATION_EXIT_CODE)"
          exit 1
        else
          echo "✅ 마이그레이션 성공!"
        fi

    - name: ECS 서비스 업데이트
      run: |
        echo "🚀 ECS 서비스 업데이트 시작..."

        # 서비스가 존재하는지 확인
        SERVICE_EXISTS=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].serviceName' \
          --output text 2>/dev/null || echo "")

        if [ -z "$SERVICE_EXISTS" ] || [ "$SERVICE_EXISTS" = "None" ]; then
          echo "⚠️  ECS 서비스가 존재하지 않습니다."
          echo "서비스를 먼저 생성해야 합니다."
          exit 1
        fi

        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition ${{ env.TASK_DEF_ARN }} \
          --force-new-deployment

        echo "✅ ECS 서비스 업데이트 완료"

    - name: 배포 검증
      run: |
        echo "🔍 배포 검증 시작..."

        for i in {1..60}; do
          DEPLOYMENT_STATUS=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --query "services[0].deployments[?status=='PRIMARY'].rolloutState" \
            --output text)

          if [ "$DEPLOYMENT_STATUS" = "COMPLETED" ]; then
            echo "✅ 배포 성공! (${i}초)"
            break
          elif [ $i -eq 60 ]; then
            echo "⚠️  배포 검증 타임아웃 (60초)"
            break
          fi

          sleep 1
        done

    - name: 배포 완료 알림
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 GLI Django API Staging 배포 성공!"
          echo "🌐 URL: https://stg-api.glibiz.com"
          echo "🏷️  BUILD_UID: ${{ env.BUILD_UID }}"
          echo "🐳 Image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
        else
          echo "❌ GLI Django API Staging 배포 실패!"
        fi
